installation_size <- 10
pv_generator <- installation_size * dnorm(c(0:23), mean = 14, sd = 3)
time = c(0:23)
consumer_1 <- pv_generator
consumer_2 <- pv_generator * 0.5
consumer_3 <- rep(1, times = length(pv_generator))
n_consumers <- 2
df_consumers <- data.frame("time" = time,
"consumer_1" = consumer_1,
"consumer_2" = consumer_2,
"consumer_3" = consumer_3)
# Frechet distance
library("kmlShape")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_1)
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_1)
time
pv_generator
time
consumer_1
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_2)
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_3)
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_1, FrechetSumOrMax="sum")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_1, FrechetSumOrMax="sum")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_1, FrechetSumOrMax="max")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_2, FrechetSumOrMax="sum")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_2, FrechetSumOrMax="max")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_3, FrechetSumOrMax="sum")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_3, FrechetSumOrMax="max")
# Kolmogorov-Smirnov test
library("dgof")
install.packages("dgof")
# Kolmogorov-Smirnov test
library("dgof")
ks.test(x = pv_generator, y = consumer_1)
ks.test(x = pv_generator, y = consumer_2)
ks.test(x = pv_generator, y = consumer_3)
a = ks.test(x = pv_generator, y = consumer_1)
a$statistic
a$p.value
a$alternative
a = ks.test(x = pv_generator, y = consumer_2)
a$statistic
a$p.value
a$alternative
# FFT
fft(z = pv_generator)
# FFT
a = fft(z = pv_generator)
plot(a)
mod(fft_pv_generator)
abs(fft_pv_generator)
# FFT
fft_pv_generator = fft(z = pv_generator)
abs(fft_pv_generator)
fft_pv_generator = abs(fft_pv_generator)
plot(fft_pv_generator)
fft_consumer_1 = fft(z = consumer_1)
fft_consumer_1 = abs(fft_consumer_1)
plot(fft_consumer_1)
fft_consumer_2 = fft(z = consumer_2)
fft_consumer_2 = abs(fft_consumer_2)
plot(fft_consumer_2)
# FFT
fft_pv_generator = fft(z = pv_generator)
fft_pv_generator = abs(fft_pv_generator)
plot(fft_pv_generator)
fft_consumer_2 = fft(z = consumer_2)
fft_consumer_2 = abs(fft_consumer_2)
plot(fft_consumer_2)
fft_consumer_3 = fft(z = consumer_3)
fft_consumer_3 = abs(fft_consumer_3)
plot(fft_consumer_3)
c(2:23)
c(13:23)
c(0:11)
c(12:23)
consumer_4 <- c(dnorm(c(0:11), mean = 5, sd = 1.5), dnorm(c(12:23), mean = 17, sd = 1.5))
plot(consumer_4)
consumer_3
consumer_4
length(consumer_q)
length(consumer_1)
length(consumer_4)
fft_consumer_4 = fft(z = consumer_4)
fft_consumer_4 = abs(fft_consumer_4)
plot(fft_consumer_4)
plot(fft_pv_generator)
plot(fft_consumer_2)
plot(fft_consumer_3)
plot(fft_consumer_4)
consumer_5 <- c(dnorm(c(0:19), mean = 10, sd = 1.5), dnorm(c(20:23), mean = 21, sd = 0.5))
fft_consumer_5 = fft(z = consumer_5)
fft_consumer_5 = abs(fft_consumer_5)
plot(fft_consumer_5)
# Coeficient of correlation (r)
cor(x = pv_generator, y = consumer_1)
cor(x = pv_generator, y = consumer_2)
cor(x = pv_generator, y = consumer_3)
consumer_3
cor(x = pv_generator, y = consumer_4)
cor(x = pv_generator, y = consumer_5)
# Coeficient of correlation (r)
cor(x = pv_generator, y = consumer_1)
cor(x = pv_generator, y = consumer_3)
cor(x = pv_generator, y = consumer_2)
cor(x = pv_generator, y = consumer_2)
cor(x = pv_generator, y = consumer_3)
# Coeficient of correlation (r)
# detects "shape" and is not affected by the amplitude
cor(x = pv_generator, y = consumer_1)
cor(x = pv_generator, y = consumer_2)
cor(x = pv_generator, y = consumer_3)
# problem: for non variance curves (constants) it cant be calculated
cor(x = pv_generator, y = consumer_3)
# problem: for non variance curves (constants) it cant be calculated
cor(x = pv_generator, y = consumer_3)
cor(x = pv_generator, y = consumer_4)
cor(x = pv_generator, y = consumer_5)
# negative correlation index
plot(pv_generator, consumer_4)
plot(pv_generator, consumer_5)
ggplot() + geom_line(aes(x = time, y = pv_generator))
ggplot() + geom_line(aes(x = time, y = pv_generator)) + geom_line(aes(x = time, y = consumer_2))
ggplot() + geom_line(aes(x = time, y = pv_generator)) + geom_line(aes(x = time, y = consumer_5))
cor(x = pv_generator, y = consumer_1)
cor(x = pv_generator, y = consumer_2)
cov(x = pv_generator, y = consumer_1)
cov(x = pv_generator, y = consumer_2)
cov(x = pv_generator, y = consumer_3)
cov(x = pv_generator, y = consumer_4)
plot(pv_generator, consumer_2)
cov(x = pv_generator, y = consumer_1)
# Chi-squared
chisq.test(x = pv_generator, y = consumer_1)
chisq.test(x = pv_generator, y = consumer_2)
chisq.test(x = pv_generator, y = consumer_3)
chisq.test(x = pv_generator, y = consumer_4)
# Nash coefficient
library("hydroGOF")
install.packages("hydroGOF")
# Nash coefficient
library("hydroGOF")
mNSE(pv_generator, consumer_1)
mNSE(pv_generator, consumer_2)
mNSE(pv_generator, consumer_3)
mNSE(pv_generator, consumer_4)
mNSE(pv_generator, consumer_5)
library("seewave")
install.packages("seewave")
library("seewave")
itakura.dist(fft_pv_generator, fft_consumer_1, scale=FALSE)
itakura.dist(fft_pv_generator, fft_consumer_1, scale=FALSE)
itakura.dist(fft_pv_generator, fft_consumer_2, scale=FALSE)
itakura.dist(fft_pv_generator, fft_consumer_3, scale=FALSE)
itakura.dist(fft_pv_generator, fft_consumer_4, scale=FALSE)
itakura.dist(fft_pv_generator, fft_consumer_5, scale=FALSE)
fft_consumer_1
itakura.dist(fft_pv_generator, fft_consumer_2, scale=TRUE)
itakura.dist(fft_pv_generator, fft_consumer_3, scale=TRUE)
itakura.dist(fft_pv_generator, fft_consumer_4, scale=TRUE)
itakura.dist(fft_pv_generator, fft_consumer_5, scale=TRUE)
spec(pv_generator)
spec(wave = pv_generator,f = 1)
plot(fft_pv_generator)
spec(wave = pv_generator,f = 1)
a = spec(wave = pv_generator,f = 1)
a
fft_pv_generator
a = spec(wave = pv_generator,f = 1)
a
plot(fft_pv_generator[1:12])
a = spec(wave = pv_generator,f = 1, fftw = TRUE)
a = spec(wave = pv_generator,f = 1, fftw = TRUE)
install-
fkgj
install.packages("fftw")
library("fftw")
a = spec(wave = pv_generator,f = 1, fftw = TRUE)
installation_size <- 10
pv_generator <- installation_size * dnorm(c(0:23), mean = 14, sd = 0.5)
time = c(0:23)
fft_pv_generator = fft(z = pv_generator)
fft_pv_generator = abs(fft_pv_generator)
plot(fft_pv_generator)
fft_pv_generator
fft_pv_generator = fft(z = pv_generator)
fft_pv_generator
fft_pv_generator = abs(fft_pv_generator)
fft_pv_generator = fft(z = pv_generator)
fft_pv_generator = abs(fft_pv_generator)
fft_pv_generator = Mod(fft_pv_generator)
fft_pv_generator = fft(z = pv_generator)
fft_pv_generator = abs(fft_pv_generator)
plot(fft_pv_generator)
fft_pv_generator = fft(z = pv_generator)
fft_pv_generator = Mod(fft_pv_generator)
plot(fft_pv_generator)
fft_pv_generator = fft(z = pv_generator)
fft_pv_generator = Mod(fft_pv_generator)
plot(fft_pv_generator)
fft_consumer_2 = fft(z = consumer_2)
fft_consumer_2 = Mod(fft_consumer_2)
plot(fft_consumer_2)
fft_pv_generator = Arg(fft_pv_generator)
fft_pv_generator = fft(z = pv_generator)
fft_pv_generator = Mod(fft_pv_generator)
fft_pv_generator = fft(z = pv_generator)
fft_pv_generator_Mod = Mod(fft_pv_generator)
fft_pv_generator_Arg = Arg(fft_pv_generator)
plot(fft_pv_generator_Arg)
fft_consumer_2 = fft(z = consumer_2)
fft_consumer_2 = Mod(fft_consumer_2)
plot(fft_consumer_2)
fft_consumer_3 = fft(z = consumer_3)
fft_consumer_3 = Mod(fft_consumer_3)
plot(fft_consumer_3)
fft_consumer_4 = fft(z = consumer_4)
fft_consumer_4 = Mod(fft_consumer_4)
plot(fft_consumer_4)
fft_consumer_5 = fft(z = consumer_5)
fft_consumer_5 = abs(fft_consumer_5)
plot(fft_consumer_5)
itakura.dist(fft_pv_generator, fft_consumer_1, scale=TRUE)
itakura.dist(fft_pv_generator, fft_consumer_2, scale=TRUE)
itakura.dist(fft_pv_generator_Mod, fft_consumer_1, scale=TRUE)
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_1, FrechetSumOrMax="sum")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_1, FrechetSumOrMax="max")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_2, FrechetSumOrMax="sum")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_2, FrechetSumOrMax="max")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_3, FrechetSumOrMax="sum")
distFrechet(Px = time, Py = pv_generator, Qx = time, Qy = consumer_3, FrechetSumOrMax="max")
filename = "202005071659_charts_historic.xlsx"
df <- read.csv(file = filename, header = TRUE)
setwd("~/Documents/EKATE_optimization_algorithm")
filename = "202005071659_charts_historic.xlsx"
df <- read.csv(file = filename, header = TRUE)
filename = "202005071659_charts_historic.xlsx"
df <- read.csv(file = filename, header = TRUE)
df <- read.table(file = filename, header = TRUE)
read.xlsx(filename = filename,
sheetIndex = 1)
library("xlsx")
library("xlsx")
install.packages("xlsx")
library("xlsx")
filename = "202005071659_charts_historic.csv"
df <- read.table(file = filename, header = TRUE)
df <- read.csv(file = filename, header = TRUE)
df$EDIFICI.ADMINISTRATIU.AVINYÃ“.7...CONSUMS.DESAGREGATS...01.12.2019...07.05.2020
read.xlsx(filename = filename,
sheetIndex = 1)
filename = "202005071659_charts_historic.csv"
df <- read.csv(file = filename, header = TRUE)
df$Planta.3.Total.Energia.activa...kWh.
df$X
filename = "202005081057_charts_historic.csv"
df <- read.csv(file = filename, header = TRUE)
identical(df$X, df$X.1)
identical(df$Planta.1.Total.Energia.activa...kWh., df$Planta.4.Total.Energia.activa...kWh.)
identical(df$Planta.1.Total.Energia.activa...kWh., df$Planta.4.Total.Energia.activa...kWh., df$Planta.2.Total.Energia.activa...kWh.)
colnames(df)
grep("Planta", colnames(df))
!grep("Planta", colnames(df))
grepl("Planta", colnames(df))
df_new <- df[, !grepl("Planta", colnames(df))]
df_new
colnames(df_new)
head(df_new)
head(df)
df$Planta.1.Total.Energia.activa...kWh.[,1:5]
df$Planta.1.Total.Energia.activa...kWh.[1:5]
grepl("Planta|Energia|Botiga", colnames(df))
df_new <- df[, !grepl("Planta|Energia|Botiga", colnames(df))]
head(df_new)
length(df)
length(df_new)
colnames(grepl("Planta|Energia|Botiga", colnames(df)))
colnames(grepl("Planta|Energia|Botiga", colnames(df_new)))
grepl("Planta|Energia|Botiga", colnames(df))
colnames(df)[grepl("Planta|Energia|Botiga", colnames(df))]
colnames(df)
colnames(df)[grepl("Planta|Energia|Botiga", colnames(df))]
colnames(df_new) <- colnames(df)[grepl("Planta|Energia|Botiga", colnames(df))]
df$Planta.1.Total.Energia.activa...kWh.
as.Date(df$Planta.1.Total.Energia.activa...kWh.)
df$Planta.1.Total.Energia.activa...kWh.[1]
as.Date(as.character(df$Planta.1.Total.Energia.activa...kWh.))
as.character(df$Planta.1.Total.Energia.activa...kWh.)
as.POSIXct(as.character(df$Planta.1.Total.Energia.activa...kWh.))
as.character(df$Planta.1.Total.Energia.activa...kWh.)
as.POSIXct(as.character(df$Planta.1.Total.Energia.activa...kWh.), format = "%d/%m/%Y %H:%M", tz = "Europe/Madrid")
df_new$time <- as.POSIXct(as.character(df$Planta.1.Total.Energia.activa...kWh.), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_new$time
as.character(df$Planta.1.Total.Energia.activa...kWh.)
as.character(df$Planta.1.Total.Energia.activa...kWh.)[2:nrow(df)]
df_new$time <- as.POSIXct(as.character(df$Planta.1.Total.Energia.activa...kWh.)[2:nrow(df)], format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
head(df_new)
filename = "202005081057_charts_historic.csv"
df <- read.csv(file = filename, header = TRUE)
df_new <- df[2:nrow(df), !grepl("Planta|Energia|Botiga", colnames(df))]
head(df_new)
colnames(df_new) <- colnames(df)[grepl("Planta|Energia|Botiga", colnames(df))]
df_new$time <- as.POSIXct(as.character(df$Planta.1.Total.Energia.activa...kWh.)[2:nrow(df)], format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_new
library(reshape2)
library(ggplot2)
df_plot <- melt(df_new ,  id.vars = "time", variable.name = "series")
ggplot(df_plot) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
df_plot
ggplot(df_new) + geom_line(aes(x = df_new$time, df_new$Planta.1.Total.Energia.activa...kWh.))
ggplot(df) + geom_line(aes(x = df$time, df$Planta.1.Total.Energia.activa...kWh.))
ggplot(df) + geom_line(aes(x = df$time, y = df$Planta.1.Total.Energia.activa...kWh.))
df$Planta.1.Total.Energia.activa...kWh.
as.POSIXct(as.character(df$Planta.1.Total.Energia.activa...kWh.)[2:nrow(df)], format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
head(df$X)
as.numeric(df_new)
as.numeric(df_new$Planta.1.Total.Energia.activa...kWh.)
df_new$Planta.1.Total.Energia.activa...kWh.
as.numeric(as.character(df_new$Planta.1.Total.Energia.activa...kWh.,))
as.numeric(as.character(df_new$Planta.1.Total.Energia.activa...kWh.))
tail(df_new$Planta.1.Total.Energia.activa...kWh.)
tail(df_new$Planta.1.Total.Energia.activa...kWh., 5)
tail(df_new$Planta.1.Total.Energia.activa...kWh., 10)
colnames(df_new)
filename = "202005081057_charts_historic.csv"
df <- read.csv(file = filename, header = TRUE)
df_new <- df[2:nrow(df), !grepl("Planta|Energia|Botiga", colnames(df))]
colnames(df_new) <- colnames(df)[grepl("Planta|Energia|Botiga", colnames(df))]
for (col in colnames(df_new)) {
df[, col] <- as.numeric(as.character(df_new[, col]))
}
df_new$time <- as.POSIXct(as.character(df$Planta.1.Total.Energia.activa...kWh.)[2:nrow(df)], format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
library(reshape2)
library(ggplot2)
df_plot <- melt(df_new ,  id.vars = "time", variable.name = "series")
ggplot(df_plot) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
filename = "202005081057_charts_historic.csv"
df <- read.csv(file = filename, header = TRUE)
df_new <- df[2:nrow(df), !grepl("Planta|Energia|Botiga", colnames(df))]
colnames(df_new) <- colnames(df)[grepl("Planta|Energia|Botiga", colnames(df))]
for (col in colnames(df_new)) {
df_new[, col] <- as.numeric(as.character(df_new[, col]))
}
df_new$time <- as.POSIXct(as.character(df$Planta.1.Total.Energia.activa...kWh.)[2:nrow(df)], format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
library(reshape2)
library(ggplot2)
df_plot <- melt(df_new ,  id.vars = "time", variable.name = "series")
ggplot(df_plot) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
df_plot <- melt(df_new ,  id.vars = "time", variable.name = "series")
ggplot(df_plot) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
ggplot(df_new) + geom_line(aes(x = df_new$time, y = df_new$Planta.1.Total.Energia.activa...kWh.))
ggplot(df) + geom_line(aes(x = df$time, y = df$Planta.1.Total.Energia.activa...kWh.))
ggplot(df_plot) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
filename_1 = "202005081411_charts_compare.csv"
filename_2 = "202005081413_charts_compare.csv"
df_1 <- read.csv(file = filename_1, header = TRUE)
df_2 <- read.csv(file = filename_2, header = TRUE)
df_new <- df[2:nrow(df), !grepl("Planta|Energia|Botiga", colnames(df))]
df_1$ProducciÃ³.Energia.Fotovoltaica...kWh.
df_1$X
nrow(df_1)
df_1[2:nrow(df_1)]
df_1[2:nrow(df_1),]
head(df_1[2:nrow(df_1),])
df_1 <- read.csv(file = filename_1, header = FALSE)
head(df_1)
df_1 <- read.csv(file = filename_1, header = TRUE)
df_2 <- read.csv(file = filename_2, header = TRUE)
df_1[2:nrow(df_1),]
df_1 <- read.csv(file = filename_1, header = TRUE)[2:nrow(df_1),]
head(df_1)
df_1$time <- as.POSIXct(as.character(df_1$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
head(df_1)
colnames(df_1) <- c("time", "value")
colnames(df_2) <- c("time", "value")
colnames(df_1)
head(df_1)
df_1$time <- as.POSIXct(as.character(df_1$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
nrows(df_1)
nrow(df_1)
nrow(df_2)
head(df_1$time)
head(df_2$time)
df_2$time <- as.POSIXct(as.character(df_2$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
nrow(df_1)
nrow(df_2)
head(df_2)
filename_1 = "202005081411_charts_compare.csv"
filename_2 = "202005081413_charts_compare.csv"
df_1 <- read.csv(file = filename_1, header = TRUE)[2:nrow(df_1),]
df_2 <- read.csv(file = filename_2, header = TRUE)[2:nrow(df_2),]
head(df_1)
head(df_2)
colnames(df_1) <- c("time", "value")
colnames(df_2) <- c("time", "value")
head(df_1)
head(df_2)
df_1$time <- as.POSIXct(as.character(df_1$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_2$time <- as.POSIXct(as.character(df_2$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
nrow(df_1)
nrow(df_2)
head(df_1$time)
head(df_2$time)
tail(df_2$time)
tail(df_1$time)
df_1$value
df_1$value <- as.numeric(as.character(df_1$value))
df_2$value <- as.numeric(as.character(df_2$value))
df_2$value
df_1$value
merge(df_1, df_2, by = "time")
library(reshape2)
library(ggplot2)
df_plot <- melt(df ,  id.vars = "time", variable.name = "series")
df
head(df)
filename_1 = "202005081411_charts_compare.csv"
filename_2 = "202005081413_charts_compare.csv"
df_1 <- read.csv(file = filename_1, header = TRUE)[2:nrow(df_1),]
df_2 <- read.csv(file = filename_2, header = TRUE)[2:nrow(df_2),]
colnames(df_1) <- c("time", "value")
colnames(df_2) <- c("time", "value")
df_1$time <- as.POSIXct(as.character(df_1$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_2$time <- as.POSIXct(as.character(df_2$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_1$value <- as.numeric(as.character(df_1$value))
df_2$value <- as.numeric(as.character(df_2$value))
filename_1 = "202005081411_charts_compare.csv"
filename_2 = "202005081413_charts_compare.csv"
df_1 <- read.csv(file = filename_1, header = TRUE)[2:nrow(df_1),]
df_1 <- df_1[2:nrow(df_1),]
df_2 <- df_2[2:nrow(df_2),]
df_1 <- read.csv(file = filename_1, header = TRUE)
df_2 <- read.csv(file = filename_2, header = TRUE)
df_1 <- df_1[2:nrow(df_1),]
df_2 <- df_2[2:nrow(df_2),]
colnames(df_1) <- c("time", "value")
colnames(df_2) <- c("time", "value")
df_1$time <- as.POSIXct(as.character(df_1$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_2$time <- as.POSIXct(as.character(df_2$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_1$value <- as.numeric(as.character(df_1$value))
df_2$value <- as.numeric(as.character(df_2$value))
df <- merge(df_1, df_2, by = "time")
library(reshape2)
library(ggplot2)
df_plot <- melt(df ,  id.vars = "time", variable.name = "series")
ggplot(df_plot) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
plot(df_1$value)
df_2$value <- ifelse(df$value.y>2000, NA, )
df_2$value <- ifelse(df_2$value>2000, NA, df_2$value)
df_2$value
plot(df_2$value)
df <- merge(df_1, df_2, by = "time")
library(reshape2)
library(ggplot2)
df_plot <- melt(df,  id.vars = "time", variable.name = "series")
ggplot(df_plot) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
as.Date(df$time)
df$date <- as.Date(df$time)
head()
head(sd)
head(df)
grepl(pattern = "value.x", x = colnames(df))
colnames(df)[grepl(pattern = "value.x", x = colnames(df))] <- "pv_generation"
colnames(df)[grepl(pattern = "value.y", x = colnames(df))] <- "consumption"
head(df)
grepl(pattern = "2019-05-01", df$date)
df$date[grepl(pattern = "2019-05-01", df$date)]
# select only day 1 just to start:
length(df$date[grepl(pattern = "2019-05-01", df$date)])
df$date[grepl(pattern = "2019-05-01", df$date)]
# select only day 1 just to start:
df[grepl(pattern = "2019-05-01", df$date), ]
ggplot(df_day_1) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
# select only day 1 just to start:
df_day_1 <- df[grepl(pattern = "2019-05-01", df$date), ]
ggplot(df_day_1) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
df_plot <- melt(df,  id.vars = "time", variable.name = "series")
ggplot(df_plot) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
df_plot <- melt(df_day_1,  id.vars = "time", variable.name = "series")
ggplot(df_plot) + geom_line(aes(time,value, color = series)) + facet_grid(series ~ ., scales = "free_y") + theme(legend.position = "none")
filename_cons_1 = "202005081655_charts_compare.csv"
filename_cons_2 = "202005081656_charts_compare.csv"
filename_cons_3 = "202005081658_charts_compare.csv"
df_cons_1 <- read.csv(file = filename_cons_1, header = TRUE)
df_cons_2 <- read.csv(file = filename_cons_2, header = TRUE)
df_cons_3 <- read.csv(file = filename_cons_3, header = TRUE)
head(df_cons_1)
colnames(df_cons_1) <- c("time", "value")
colnames(df_cons_2) <- c("time", "value")
colnames(df_cons_3) <- c("time", "value")
df_cons_1$time <- as.POSIXct(as.character(df_cons_1$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_cons_1$time
df_cons_1$time <- as.POSIXct(as.character(df_cons_1$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_cons_2$time <- as.POSIXct(as.character(df_cons_2$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_cons_3$time <- as.POSIXct(as.character(df_cons_3$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
head(df_cons_1)
filename_cons_1 = "202005081655_charts_compare.csv"
filename_cons_2 = "202005081656_charts_compare.csv"
filename_cons_3 = "202005081658_charts_compare.csv"
df_cons_1 <- read.csv(file = filename_cons_1, header = TRUE)
df_cons_2 <- read.csv(file = filename_cons_2, header = TRUE)
df_cons_3 <- read.csv(file = filename_cons_3, header = TRUE)
colnames(df_cons_1) <- c("time", "value")
colnames(df_cons_2) <- c("time", "value")
colnames(df_cons_3) <- c("time", "value")
head(df_cons_1)
as.POSIXct(as.character(df_cons_1$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_cons_1$time <- as.POSIXct(as.character(df_cons_1$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_cons_1$time
df_cons_2$time <- as.POSIXct(as.character(df_cons_2$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
df_cons_3$time <- as.POSIXct(as.character(df_cons_3$time), format = "%d-%m-%Y %H:%M", tz = "Europe/Madrid")
head(df_cons_2)
